diff --git a/Makefile b/Makefile
index 39a99d7..da9dd3a 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_pft\
+	$U/_pft2\
+	$U/_cowtest\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..8d29250 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,9 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+void            kincrease_ref(uint64);
+void            kdecrease_ref(uint64);
+uint64          kpages_in_freelist(void);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -106,6 +109,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            stats(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..3c477b1 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -14,6 +14,10 @@ void freerange(void *pa_start, void *pa_end);
 extern char end[]; // first address after kernel.
                    // defined by kernel.ld.
 
+// use a fixed size array where you can index 
+// by the page's physical address divided by page size
+int page_ref_count[PHYSTOP / PGSIZE];
+
 struct run {
   struct run *next;
 };
@@ -76,7 +80,51 @@ kalloc(void)
     kmem.freelist = r->next;
   release(&kmem.lock);
 
+  page_ref_count[(uint64)r / PGSIZE] = 1;
+
   if(r)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+// increase the reference count of the page
+void
+kincrease_ref(uint64 pa)
+{
+  // panic if the page is not allocated
+  if(page_ref_count[(uint64)pa / PGSIZE] == 0)
+    panic("kincreaseref");
+  acquire(&kmem.lock);
+  page_ref_count[(uint64)pa / PGSIZE]++;
+  release(&kmem.lock);
+}
+
+// decrease the reference count of the page
+void
+kdecrease_ref(uint64 pa)
+{
+  // panic if the page is not allocated
+  if(page_ref_count[(uint64)pa / PGSIZE] == 0)
+    panic("kdecreaseref");
+  acquire(&kmem.lock);
+  page_ref_count[(uint64)pa / PGSIZE]--;
+  release(&kmem.lock);
+  // garbage collect the page if the reference count is 0
+  if(page_ref_count[(uint64)pa / PGSIZE] == 0)
+    kfree((void*)pa);
+}
+
+// print number of pages in freelist
+uint64
+kpages_in_freelist(void){
+  struct run *r;
+  int count = 0;
+  acquire(&kmem.lock);
+  r = kmem.freelist;
+  while(r){
+    count++;
+    r = r->next;
+  }
+  release(&kmem.lock);
+  return count;
+}
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..d8bae58 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -681,3 +681,17 @@ procdump(void)
     printf("\n");
   }
 }
+
+void
+stats(void){
+  int pages_used = 0;
+  struct proc *p;
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
+    if (p->state == UNUSED)
+      continue;
+    pages_used += p->sz / PGSIZE;
+  }
+  printf("Total pages used: %d\n", pages_used);
+  printf("Total pages in freelist: %d\n", kpages_in_freelist());
+}
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..56dc89b 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_COW (1L << 8) // use a reserve bit
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..fd112d8 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_stats(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +127,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_stats]   sys_stats,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..d5713c0 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_stats  22
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..360ddf1 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,11 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_stats(void){
+  //printf("sys_stats() called\n");
+  // for all process print number of pages
+  stats();
+  return 0;
+}
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..a0acea4 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -67,7 +67,37 @@ usertrap(void)
     syscall();
   } else if((which_dev = devintr()) != 0){
     // ok
-  } else {
+  } else if(r_scause() == 15){
+    pte_t *pte; // new page table entry
+    uint64 pa; // new physical address
+    uint flags; 
+    char* mem; 
+
+    // get virtual address from stval
+    uint64 va = PGROUNDDOWN(r_stval());
+    if(va >= MAXVA){
+      exit(-1);
+    }
+    if ((pte = walk(p->pagetable, va, 0)) == 0)
+      panic("usertrap: pte should exist");
+    if ((*pte & PTE_V) == 0)
+      panic("usertrap: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    flags = flags | PTE_W;
+    flags = flags & ~PTE_COW;
+
+    // allocate new page
+    if((mem = kalloc()) == 0) // ref count = 1
+      panic("usertrap: out of memory");
+    memmove(mem, (char*)pa, PGSIZE);
+    if(mappages(p->pagetable, va, PGSIZE, (uint64)mem, flags) != 0){
+      kfree(mem);
+      panic("usertrap: mappages failed");
+    }
+    kdecrease_ref(pa);
+  } 
+  else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
     setkilled(p);
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..3e54280 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -153,7 +153,7 @@ mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
   for(;;){
     if((pte = walk(pagetable, a, 1)) == 0)
       return -1;
-    if(*pte & PTE_V)
+    if((*pte & PTE_V) && !(*pte & PTE_COW))
       panic("mappages: remap");
     *pte = PA2PTE(pa) | perm | PTE_V;
     if(a == last)
@@ -185,7 +185,8 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
       panic("uvmunmap: not a leaf");
     if(do_free){
       uint64 pa = PTE2PA(*pte);
-      kfree((void*)pa);
+      //kfree((void*)pa);
+      kdecrease_ref(pa);
     }
     *pte = 0;
   }
@@ -308,22 +309,26 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
+  //char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
+    *pte = *pte & ~PTE_W; // turn off write flag
+    *pte = *pte | PTE_COW; // turn on COW
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+    // if((mem = kalloc()) == 0) // no new page is allocated
+    //   goto err;
+    // memmove(mem, (char*)pa, PGSIZE);
+    // make PTEs in the child processâ€™ pagetable points to the parent's physical pages
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+     // kfree(mem);
       goto err;
     }
+    kincrease_ref(pa);
   }
   return 0;
 
@@ -355,6 +360,34 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
+    if(va0>=MAXVA){
+      return -1;
+    }
+    pte_t *pte = walk(pagetable, va0, 0);
+    if(pte == 0)
+      return -1;
+    if ((*pte & PTE_V) == 0)
+      return -1;
+    if( (*pte & PTE_U) == 0)
+      return -1;
+    if((*pte & PTE_COW)) {
+      uint64 pa = PTE2PA(*pte);
+      uint flags = PTE_FLAGS(*pte);
+      flags = flags | PTE_W;
+      flags = flags & ~PTE_COW;
+
+      char* mem;
+      // allocate new page
+      if ((mem = kalloc()) == 0) // ref count = 1
+        panic("copyout: out of memory");
+      memmove(mem, (char *)pa, PGSIZE);
+      if (mappages(pagetable, va0, PGSIZE, (uint64)mem, flags) != 0)
+      {
+        kfree(mem);
+        panic("usertrap: mappages failed");
+      }
+      kdecrease_ref(pa);
+    }
     pa0 = walkaddr(pagetable, va0);
     if(pa0 == 0)
       return -1;
diff --git a/user/cowtest.c b/user/cowtest.c
new file mode 100644
index 0000000..403db1a
--- /dev/null
+++ b/user/cowtest.c
@@ -0,0 +1,221 @@
+//
+// tests for copy-on-write fork() assignment.
+// src : https://github.com/mit-pdos/xv6-riscv-fall19/blob/xv6-riscv-fall19/user/cowtest.c
+//
+
+#include "kernel/types.h"
+#include "kernel/memlayout.h"
+#include "user/user.h"
+
+// allocate more than half of physical memory,
+// then fork. this will fail in the default
+// kernel, which does not support copy-on-write.
+void simpletest()
+{
+    uint64 phys_size = PHYSTOP - KERNBASE;
+    int sz = (phys_size / 3) * 2;
+
+    printf("simple: ");
+
+    char *p = sbrk(sz);
+    if (p == (char *)0xffffffffffffffffL)
+    {
+        printf("sbrk(%d) failed\n", sz);
+        exit(-1);
+    }
+
+    for (char *q = p; q < p + sz; q += 4096)
+    {
+        *(int *)q = getpid();
+    }
+
+    int pid = fork();
+    if (pid < 0)
+    {
+        printf("fork() failed\n");
+        exit(-1);
+    }
+
+    if (pid == 0)
+        exit(0);
+
+    wait(0);
+
+    if (sbrk(-sz) == (char *)0xffffffffffffffffL)
+    {
+        printf("sbrk(-%d) failed\n", sz);
+        exit(-1);
+    }
+
+    printf("ok\n");
+}
+
+// three processes all write COW memory.
+// this causes more than half of physical memory
+// to be allocated, so it also checks whether
+// copied pages are freed.
+void threetest()
+{
+    uint64 phys_size = PHYSTOP - KERNBASE;
+    int sz = phys_size / 4;
+    int pid1, pid2;
+
+    printf("three: ");
+
+    char *p = sbrk(sz);
+    if (p == (char *)0xffffffffffffffffL)
+    {
+        printf("sbrk(%d) failed\n", sz);
+        exit(-1);
+    }
+
+    pid1 = fork();
+    if (pid1 < 0)
+    {
+        printf("fork failed\n");
+        exit(-1);
+    }
+    if (pid1 == 0)
+    {
+        pid2 = fork();
+        if (pid2 < 0)
+        {
+            printf("fork failed");
+            exit(-1);
+        }
+        if (pid2 == 0)
+        {
+            for (char *q = p; q < p + (sz / 5) * 4; q += 4096)
+            {
+                *(int *)q = getpid();
+            }
+            for (char *q = p; q < p + (sz / 5) * 4; q += 4096)
+            {
+                if (*(int *)q != getpid())
+                {
+                    printf("wrong content\n");
+                    exit(-1);
+                }
+            }
+            exit(-1);
+        }
+        for (char *q = p; q < p + (sz / 2); q += 4096)
+        {
+            *(int *)q = 9999;
+        }
+        exit(0);
+    }
+
+    for (char *q = p; q < p + sz; q += 4096)
+    {
+        *(int *)q = getpid();
+    }
+
+    wait(0);
+
+    sleep(1);
+
+    for (char *q = p; q < p + sz; q += 4096)
+    {
+        if (*(int *)q != getpid())
+        {
+            printf("wrong content\n");
+            exit(-1);
+        }
+    }
+
+    if (sbrk(-sz) == (char *)0xffffffffffffffffL)
+    {
+        printf("sbrk(-%d) failed\n", sz);
+        exit(-1);
+    }
+
+    printf("ok\n");
+}
+
+char junk1[4096];
+int fds[2];
+char junk2[4096];
+char buf[4096];
+char junk3[4096];
+
+// test whether copyout() simulates COW faults.
+void filetest()
+{
+    printf("file: ");
+
+    buf[0] = 99;
+
+    for (int i = 0; i < 4; i++)
+    {
+        if (pipe(fds) != 0)
+        {
+            printf("pipe() failed\n");
+            exit(-1);
+        }
+        int pid = fork();
+        if (pid < 0)
+        {
+            printf("fork failed\n");
+            exit(-1);
+        }
+        if (pid == 0)
+        {
+            sleep(1);
+            if (read(fds[0], buf, sizeof(i)) != sizeof(i))
+            {
+                printf("error: read failed\n");
+                exit(1);
+            }
+            sleep(1);
+            int j = *(int *)buf;
+            if (j != i)
+            {
+                printf("error: read the wrong value\n");
+                exit(1);
+            }
+            exit(0);
+        }
+        if (write(fds[1], &i, sizeof(i)) != sizeof(i))
+        {
+            printf("error: write failed\n");
+            exit(-1);
+        }
+    }
+
+    int xstatus = 0;
+    for (int i = 0; i < 4; i++)
+    {
+        wait(&xstatus);
+        if (xstatus != 0)
+        {
+            exit(1);
+        }
+    }
+
+    if (buf[0] != 99)
+    {
+        printf("error: child overwrote parent\n");
+        exit(1);
+    }
+
+    printf("ok\n");
+}
+
+int main(int argc, char *argv[])
+{
+    simpletest();
+
+    // check that the first simpletest() freed the physical memory.
+    simpletest();
+
+    threetest();
+    threetest();
+    threetest();
+
+    filetest();
+
+    printf("ALL COW TESTS PASSED\n");
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/pft.c b/user/pft.c
new file mode 100644
index 0000000..1547b2a
--- /dev/null
+++ b/user/pft.c
@@ -0,0 +1,39 @@
+// Test that fork fails gracefully.
+// Tiny executable so that the limit can be filling the proc table.
+
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+#define N 1000
+
+void print(const char *s)
+{
+    write(1, s, strlen(s));
+}
+
+void forktest(void)
+{
+    int* ptr = malloc(sizeof(int));
+
+    *ptr = 0;
+    printf("initial value: %d\n", *ptr);
+
+    int pid = fork();
+    // child 
+    if (pid == 0)
+    {
+        *ptr = 1;
+        printf("child: %d\n", *ptr);
+    }else {
+        wait(0);
+        *ptr = 2;
+        printf("parent: %d\n", *ptr);
+    }
+}
+
+int main(void)
+{
+    forktest();
+    exit(0);
+}
diff --git a/user/pft2.c b/user/pft2.c
new file mode 100644
index 0000000..5760ca4
--- /dev/null
+++ b/user/pft2.c
@@ -0,0 +1,47 @@
+// Test that fork fails gracefully.
+// Tiny executable so that the limit can be filling the proc table.
+
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+#define N 1000
+
+void print(const char *s)
+{
+    write(1, s, strlen(s));
+}
+
+void forktest(void)
+{
+    int *ptr = malloc(sizeof(int));
+
+    stats();
+
+    *ptr = 0;
+    printf("initial value: %d\n", *ptr);
+
+    int pid = fork();
+    // child
+    if (pid == 0)
+    {
+        stats();
+        *ptr = 1;
+        printf("child: %d\n", *ptr);
+        stats();
+    }
+    else
+    {
+        wait(0);
+        stats();
+        *ptr = 2;
+        printf("parent: %d\n", *ptr);
+        stats();
+    }
+}
+
+int main(void)
+{
+    forktest();
+    exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..f57f9f3 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int stats(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..4469db7 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("stats");
